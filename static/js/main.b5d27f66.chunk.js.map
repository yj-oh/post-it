{"version":3,"sources":["lib/storage.ts","store/postIt/index.ts","store/board/index.ts","store/board/actions.ts","store/postIt/actions.ts","store/postIt/reducer.ts","store/board/reducer.ts","components/board/BoardItem.tsx","components/board/BoardList.tsx","components/board/BoardName.tsx","components/postIt/PostItTitle.tsx","components/postIt/PostItContent.tsx","components/postIt/PostItItem.tsx","components/board/Board.tsx","containers/PostItBoardApp.tsx","App.tsx","store/index.ts","index.tsx"],"names":["BOARD_ITEM_NAME","POST_IT_ITEM_NAME","getBoardList","strBoardList","localStorage","getItem","JSON","parse","postBoard","name","boardList","length","newBoard","id","setItem","stringify","postActivationBoard","getActivationBoard","strActivation","board","patchBoard","newBoardList","map","item","getPostItListAll","strList","getPostItList","boardId","filter","postIt","postPostIt","postItList","putPostIt","newList","deletePostIt","removeIndex","indexOf","splice","LIST","ADD","MODIFY","GET_ACTIVATION","SET_ACTIVATION","getList","createAction","addBoard","modifyBoard","getActivation","setActivation","REMOVE","addPostIt","modifyPostIt","removePostIt","createReducer","list","result","state","payload","action","toString","activation","BoardItem","activationId","onChangeActivation","className","onClick","Container","styled","div","BoardList","onInsert","common","css","StyledField","Field","TextHeader","BoardName","dispatch","useDispatch","useState","isEditing","setIsEditing","toggleEditable","enableReinitialize","initialValues","onSubmit","values","resetForm","trim","handleSubmit","placeholder","onBlur","autoFocus","Title","PostItTitle","props","edit","handleEdit","toggleOpen","handleRemove","title","isOpen","Content","PostItContent","component","content","position","x","y","size","width","height","PostItItem","setEdit","target","window","confirm","formikProps","Board","addNewPostIt","useCallback","newPostIt","zIndex","useEffect","document","addEventListener","e","ctrlKey","metaKey","altKey","code","onDoubleClick","pageX","pageY","clientRect","currentTarget","getBoundingClientRect","left","PostItBoardApp","useSelector","App","rootReducer","combineReducers","store","createStore","composeWithDevTools","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b5d27f66.chunk.js","sourcesContent":["import { Board } from '../store/board';\nimport { PostIt } from '../store/postIt';\n\nconst BOARD_ITEM_NAME = 'boardList';\nconst POST_IT_ITEM_NAME = 'postItList';\n\n// 보드 목록 조회\nexport function getBoardList(): Board[] {\n\tconst strBoardList = localStorage.getItem(BOARD_ITEM_NAME);\n\treturn strBoardList ? JSON.parse(strBoardList) : [];\n}\n\n// 보드 단 건 저장\nexport function postBoard(name: string): Board {\n\tconst boardList = getBoardList();\n\tconst length = boardList.length;\n\n\tconst id = length > 0 ? boardList[length - 1].id + 1 : 1;\n\n\tconst newBoard = { id: id, name: name };\n\n\tlocalStorage.setItem(\n\t\tBOARD_ITEM_NAME,\n\t\tJSON.stringify([...boardList, newBoard]),\n\t);\n\tpostActivationBoard(newBoard);\n\n\treturn newBoard;\n}\n\n// 활성 보드 조회\nexport function getActivationBoard(): Board {\n\tconst strActivation = localStorage.getItem('activation');\n\treturn strActivation ? JSON.parse(strActivation) : { id: 0, name: '' };\n}\n\n// 활성 보드 변경\nexport function postActivationBoard(board: Board): Board {\n\tlocalStorage.setItem('activation', JSON.stringify(board));\n\treturn board;\n}\n\n// 보드 수정\nexport function patchBoard(board: Board): Board {\n\tconst boardList = getBoardList();\n\n\tconst newBoardList = boardList.map((item: Board) =>\n\t\titem.id === board.id ? { ...item, name: board.name } : item,\n\t);\n\tlocalStorage.setItem(BOARD_ITEM_NAME, JSON.stringify(newBoardList));\n\tpostActivationBoard(board);\n\n\treturn board;\n}\n\n// 포스트잇 전체 목록 조회\nfunction getPostItListAll(): PostIt[] {\n\tconst strList = localStorage.getItem(POST_IT_ITEM_NAME);\n\treturn strList ? JSON.parse(strList) : [];\n}\n\n// 포스트잇 목록 조회\nexport function getPostItList(boardId: number): PostIt[] {\n\tconst postItList = getPostItListAll();\n\n\treturn postItList.filter((postIt: PostIt) => postIt.boardId === boardId);\n}\n\n// 포스트잇 단 건 저장\nexport function postPostIt(postIt: PostIt): PostIt {\n\tconst postItList = getPostItListAll();\n\tconst length = postItList.length;\n\n\tpostIt.id = length > 0 ? postItList[length - 1].id + 1 : 1;\n\n\tlocalStorage.setItem(\n\t\tPOST_IT_ITEM_NAME,\n\t\tJSON.stringify([...postItList, postIt]),\n\t);\n\treturn postIt;\n}\n\n// 포스트잇 수정\nexport function putPostIt(postIt: PostIt): PostIt {\n\tconst postItList = getPostItListAll();\n\n\tconst newList = postItList.map((item: PostIt) =>\n\t\titem.id === postIt.id ? { ...postIt } : item,\n\t);\n\tlocalStorage.setItem(POST_IT_ITEM_NAME, JSON.stringify(newList));\n\n\treturn postIt;\n}\n\n// 포스트잇 삭제\nexport function deletePostIt(id: number): number {\n\tconst postItList = getPostItListAll();\n\n\tconst removeIndex = postItList\n\t\t.map(function (item: PostIt) {\n\t\t\treturn item.id;\n\t\t})\n\t\t.indexOf(id);\n\tpostItList.splice(removeIndex, 1);\n\tlocalStorage.setItem(POST_IT_ITEM_NAME, JSON.stringify(postItList));\n\n\treturn id;\n}\n","export { default } from './reducer';\nexport * from './actions';\nexport * from './types';\n","export { default } from './reducer';\nexport * from './actions';\nexport * from './types';\n","import { createAction } from 'typesafe-actions';\nimport {\n\tgetBoardList,\n\tpostBoard,\n\tgetActivationBoard,\n\tpostActivationBoard,\n\tpatchBoard,\n} from '../../lib/storage';\n\nexport const LIST = 'board/LIST';\nexport const ADD = 'board/ADD';\nexport const MODIFY = 'board/MODIFY';\nexport const GET_ACTIVATION = 'board/GET_ACTIVATION';\nexport const SET_ACTIVATION = 'board/SET_ACTIVATION';\n\nexport const getList = createAction(LIST, getBoardList)();\nexport const addBoard = createAction(ADD, postBoard)();\nexport const modifyBoard = createAction(MODIFY, patchBoard)();\nexport const getActivation = createAction(GET_ACTIVATION, getActivationBoard)();\nexport const setActivation = createAction(\n\tSET_ACTIVATION,\n\tpostActivationBoard,\n)();\n","import { createAction } from 'typesafe-actions';\nimport {\n\tgetPostItList,\n\tpostPostIt,\n\tputPostIt,\n\tdeletePostIt,\n} from '../../lib/storage';\n\nexport const LIST = 'postIt/LIST';\nexport const ADD = 'postIt/ADD';\nexport const MODIFY = 'postIt/MODIFY';\nexport const REMOVE = 'postIt/REMOVE';\n\nexport const getList = createAction(LIST, getPostItList)();\nexport const addPostIt = createAction(ADD, postPostIt)();\nexport const modifyPostIt = createAction(MODIFY, putPostIt)();\nexport const removePostIt = createAction(REMOVE, deletePostIt)();\n","import { PostItState, PostItAction } from './types';\nimport { createReducer } from 'typesafe-actions';\nimport { LIST, ADD, MODIFY, REMOVE } from './actions';\n\nconst initialState: PostItState = {\n\tlist: [],\n\tresult: null,\n};\n\nconst postIt = createReducer<PostItState, PostItAction>(initialState, {\n\t[LIST]: (state, { payload }) => ({\n\t\t...state,\n\t\tlist: payload,\n\t\tresult: null,\n\t}),\n\t[ADD]: (state, action) => ({\n\t\t...state,\n\t\tresult: action.payload.id.toString(),\n\t}),\n\t[MODIFY]: (state, action) => ({\n\t\t...state,\n\t\tresult: action.payload.id.toString(),\n\t}),\n\t[REMOVE]: (state, action) => ({\n\t\t...state,\n\t\tresult: action.payload.toString(),\n\t}),\n});\n\nexport default postIt;\n","import { BoardState, BoardAction } from './types';\nimport { createReducer } from 'typesafe-actions';\nimport { LIST, ADD, GET_ACTIVATION, SET_ACTIVATION, MODIFY } from './actions';\n\nconst initialState: BoardState = {\n\tlist: [],\n\tactivation: { id: 0, name: '' },\n\tresult: null,\n};\n\nconst board = createReducer<BoardState, BoardAction>(initialState, {\n\t[LIST]: (state, { payload }) => ({\n\t\t...state,\n\t\tlist: payload,\n\t\tresult: null,\n\t}),\n\t[ADD]: (state, action) => ({\n\t\t...state,\n\t\tactivation: action.payload,\n\t\tresult: action.payload.id.toString(),\n\t}),\n\t[MODIFY]: (state, action) => ({\n\t\t...state,\n\t\tactivation: action.payload,\n\t\tresult: action.payload.id.toString(),\n\t}),\n\t[GET_ACTIVATION]: (state, action) => ({\n\t\t...state,\n\t\tactivation: action.payload,\n\t}),\n\t[SET_ACTIVATION]: (state, action) => ({\n\t\t...state,\n\t\tactivation: action.payload,\n\t}),\n});\n\nexport default board;\n","import React from 'react';\nimport { Board } from '../../store/board';\n\ntype BoardItemProps = {\n\tboard: Board;\n\tactivationId: number;\n\tonChangeActivation: (board: Board) => void;\n};\n\nfunction BoardItem({\n\tboard,\n\tactivationId,\n\tonChangeActivation,\n}: BoardItemProps) {\n\tconst handleChangeActivation = () => {\n\t\tif (activationId === board.id) {\n\t\t\treturn;\n\t\t}\n\t\tonChangeActivation(board);\n\t};\n\n\treturn (\n\t\t<li\n\t\t\tclassName={activationId === board.id ? 'active' : ''}\n\t\t\tonClick={handleChangeActivation}\n\t\t>\n\t\t\t# {board.name}\n\t\t</li>\n\t);\n}\n\nexport default BoardItem;\n","import React from 'react';\nimport { GoPlus } from 'react-icons/go';\nimport styled from 'styled-components';\nimport { Board } from '../../store/board';\nimport BoardItem from './BoardItem';\n\nconst Container = styled.div`\n\twidth: 200px;\n\theight: 100%;\n\tbackground-color: #e2e2e2;\n\tcursor: default;\n\n\th3 {\n\t\tpadding: 1rem;\n\t\tborder-bottom: solid 1px #d2d2d2;\n\t}\n\tul {\n\t\theight: calc(100% - 49px);\n\t\toverflow-y: auto;\n\t}\n\tli {\n\t\tpadding: 0.5rem 1.5rem;\n\t\twidth: 100%;\n\t\twhite-space: nowrap;\n\t\ttext-overflow: ellipsis;\n\t\toverflow: hidden;\n\t}\n\tli.active {\n\t\tbackground-color: #bfbfbf;\n\t}\n\tli.add-board {\n\t\ttext-align: center;\n\t}\n\tli:not(.active):hover {\n\t\tbackground-color: #181818;\n\t\tcolor: #ffffff;\n\t\tcursor: pointer;\n\t}\n`;\n\ntype BoardListProps = {\n\tlist: Board[];\n\tactivation: Board;\n\tonInsert: () => void;\n\tonChangeActivation: (board: Board) => void;\n};\n\nfunction BoardList({\n\tlist,\n\tactivation,\n\tonInsert,\n\tonChangeActivation,\n}: BoardListProps) {\n\tconst handleInsert = () => {\n\t\tonInsert();\n\t};\n\n\treturn (\n\t\t<Container>\n\t\t\t<h3>📒 Online Post-it</h3>\n\t\t\t<ul>\n\t\t\t\t{list.map((item: Board) => (\n\t\t\t\t\t<BoardItem\n\t\t\t\t\t\tkey={item.id}\n\t\t\t\t\t\tboard={item}\n\t\t\t\t\t\tactivationId={activation.id}\n\t\t\t\t\t\tonChangeActivation={onChangeActivation}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t\t<li className='add-board' onClick={handleInsert}>\n\t\t\t\t\t<GoPlus />\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t</Container>\n\t);\n}\n\nexport default BoardList;\n","import React, { useState } from 'react';\nimport { Form, Formik, Field } from 'formik';\nimport { Board, modifyBoard } from '../../store/board';\nimport { useDispatch } from 'react-redux';\nimport styled, { css } from 'styled-components';\n\nconst common = css`\n\twidth: 100%;\n\theight: 30px;\n\tline-height: 30px;\n\tfont-size: 20px;\n\tfont-weight: bold;\n`;\nconst StyledField = styled(Field)`\n\t${common};\n\tborder: none;\n\toutline: solid 1px #7c7c7c;\n`;\nconst TextHeader = styled.div`\n\t${common};\n`;\n\ntype BoardProps = {\n\tboard: Board;\n};\n\nfunction BoardName({ board }: BoardProps) {\n\tconst dispatch = useDispatch();\n\n\tconst [isEditing, setIsEditing] = useState(false);\n\tconst { id, name } = board;\n\n\tconst toggleEditable = () => {\n\t\tsetIsEditing(!isEditing);\n\t};\n\n\tconst handleSubmit = (values: { name: string }) => {\n\t\tif (values.name.trim() && name !== values.name) {\n\t\t\tdispatch(modifyBoard({ id: id, name: values.name }));\n\t\t}\n\t\ttoggleEditable();\n\t};\n\n\treturn (\n\t\t<Formik\n\t\t\tenableReinitialize\n\t\t\tinitialValues={{ name: name }}\n\t\t\tonSubmit={(values, { resetForm }) => {\n\t\t\t\thandleSubmit(values);\n\t\t\t\tresetForm({});\n\t\t\t}}\n\t\t>\n\t\t\t{({ handleSubmit }) => (\n\t\t\t\t<Form>\n\t\t\t\t\t{isEditing ? (\n\t\t\t\t\t\t<StyledField\n\t\t\t\t\t\t\tname='name'\n\t\t\t\t\t\t\tplaceholder={name}\n\t\t\t\t\t\t\tonBlur={handleSubmit}\n\t\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\t/>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<TextHeader onClick={toggleEditable}>\n\t\t\t\t\t\t\t<p>{name}</p>\n\t\t\t\t\t\t</TextHeader>\n\t\t\t\t\t)}\n\t\t\t\t</Form>\n\t\t\t)}\n\t\t</Formik>\n\t);\n}\n\nexport default BoardName;\n","import React from 'react';\nimport { Field, FormikProps } from 'formik';\nimport { GoChevronDown, GoChevronUp, GoX } from 'react-icons/go';\nimport styled from 'styled-components';\n\nconst StyledField = styled(Field)`\n\tborder: none;\n\toutline: solid 1px #7c7c7c;\n`;\nconst Title = styled.div`\n\tbackground-color: #e2c000;\n\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n\tpadding: 7px;\n\theight: 2rem;\n\n\t.icon-area {\n\t\tdisplay: flex;\n\t\tfont-size: 1.2rem;\n\t\tcursor: pointer;\n\t}\n`;\n\ntype PostItTitleProps = {\n\tedit: string | null;\n\thandleEdit: (target: string) => void;\n\ttoggleOpen: () => void;\n\thandleRemove: () => void;\n};\ntype ValuesProps = {\n\ttitle: string;\n\tcontent: string;\n\tisOpen: boolean;\n};\n\nfunction PostItTitle(props: PostItTitleProps & FormikProps<ValuesProps>) {\n\tconst { edit, handleEdit, toggleOpen, handleRemove, values, handleSubmit } =\n\t\tprops;\n\n\treturn (\n\t\t<Title>\n\t\t\t{edit === 'title' ? (\n\t\t\t\t<StyledField\n\t\t\t\t\tname='title'\n\t\t\t\t\tplaceholder={values.title}\n\t\t\t\t\tonBlur={handleSubmit}\n\t\t\t\t\tautoFocus\n\t\t\t\t/>\n\t\t\t) : (\n\t\t\t\t<div className='text-area' onClick={() => handleEdit('title')}>\n\t\t\t\t\t{values.title}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t<div className='icon-area'>\n\t\t\t\t<span onClick={toggleOpen}>\n\t\t\t\t\t{values.isOpen ? <GoChevronUp /> : <GoChevronDown />}\n\t\t\t\t</span>\n\t\t\t\t<span onClick={handleRemove}>\n\t\t\t\t\t<GoX />\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t</Title>\n\t);\n}\n\nexport default PostItTitle;\n","import React from 'react';\nimport { Field, FormikProps } from 'formik';\nimport styled from 'styled-components';\n\nconst StyledField = styled(Field)`\n\theight: 100%;\n\tborder: none;\n\toutline: solid 1px #7c7c7c;\n`;\nconst Content = styled.div`\n\tbackground-color: #f8d300;\n\n\tpadding: 7px;\n\theight: calc(100% - 2rem);\n\n\tp {\n\t\theight: 100%;\n\t\toverflow-y: auto;\n\t\tword-break: break-all;\n\t}\n`;\n\ntype PostItTitleProps = {\n\tedit: string | null;\n\thandleEdit: (target: string) => void;\n};\ntype ValuesProps = {\n\ttitle: string;\n\tcontent: string;\n\tisOpen: boolean;\n};\n\nfunction PostItContent(props: PostItTitleProps & FormikProps<ValuesProps>) {\n\tconst { edit, handleEdit, values, handleSubmit } = props;\n\n\treturn (\n\t\t<Content>\n\t\t\t{edit === 'content' ? (\n\t\t\t\t<StyledField\n\t\t\t\t\tname='content'\n\t\t\t\t\tcomponent='textarea'\n\t\t\t\t\tplaceholder={values.content}\n\t\t\t\t\tonBlur={handleSubmit}\n\t\t\t\t\tautoFocus\n\t\t\t\t/>\n\t\t\t) : (\n\t\t\t\t<p onClick={() => handleEdit('content')}>{values.content}</p>\n\t\t\t)}\n\t\t</Content>\n\t);\n}\n\nexport default PostItContent;\n","import React, { useState } from 'react';\nimport {\n\tmodifyPostIt,\n\tPostIt as PostItType,\n\tremovePostIt,\n} from '../../store/postIt';\nimport styled from 'styled-components';\nimport { Form, Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport PostItTitle from './PostItTitle';\nimport PostItContent from './PostItContent';\n\nconst Container = styled.div<PostItStyleProps>`\n\tposition: absolute;\n\tleft: ${(props) => props.position?.x + 'px'};\n\ttop: ${(props) => props.position?.y + 'px'};\n\twidth: ${(props) => props.size?.width + 'px'};\n\theight: ${(props) => props.size?.height + 'px'};\n\n\t> form {\n\t\theight: 100%;\n\t}\n`;\n\ntype PostItProps = {\n\tpostIt: PostItType;\n};\ntype PostItStyleProps = {\n\tsize: {\n\t\twidth: number;\n\t\theight: number;\n\t};\n\tposition: {\n\t\tx: number;\n\t\ty: number;\n\t};\n};\n\nfunction PostItItem({ postIt }: PostItProps) {\n\tconst dispatch = useDispatch();\n\n\tconst { title, content, size, position, isOpen } = postIt;\n\tconst [edit, setEdit] = useState('');\n\n\tconst handleEdit = (target: string) => {\n\t\tsetEdit(target);\n\t};\n\n\tconst toggleOpen = () => {\n\t\tpostIt.isOpen = !postIt.isOpen;\n\t\tonSubmit();\n\t};\n\n\tconst handleSubmit = (values: { title: string; content: string }) => {\n\t\tpostIt.title = values.title.trim();\n\t\tpostIt.content = values.content;\n\t\tonSubmit();\n\t};\n\n\tconst onSubmit = () => {\n\t\tdispatch(modifyPostIt(postIt));\n\t\thandleEdit('');\n\t};\n\n\tconst handleRemove = () => {\n\t\tif (postIt.content) {\n\t\t\tif (!window.confirm('정말 삭제하시겠습니까?')) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tdispatch(removePostIt(postIt.id));\n\t};\n\n\treturn (\n\t\t<Container size={size} position={position}>\n\t\t\t<Formik\n\t\t\t\tenableReinitialize\n\t\t\t\tinitialValues={{\n\t\t\t\t\ttitle: title,\n\t\t\t\t\tcontent: content,\n\t\t\t\t\tisOpen: isOpen,\n\t\t\t\t}}\n\t\t\t\tonSubmit={(values, { resetForm }) => {\n\t\t\t\t\thandleSubmit(values);\n\t\t\t\t\tresetForm({});\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{(formikProps) => (\n\t\t\t\t\t<Form>\n\t\t\t\t\t\t<PostItTitle\n\t\t\t\t\t\t\tedit={edit}\n\t\t\t\t\t\t\thandleEdit={handleEdit}\n\t\t\t\t\t\t\ttoggleOpen={toggleOpen}\n\t\t\t\t\t\t\thandleRemove={handleRemove}\n\t\t\t\t\t\t\t{...formikProps}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{isOpen && (\n\t\t\t\t\t\t\t<PostItContent\n\t\t\t\t\t\t\t\tedit={edit}\n\t\t\t\t\t\t\t\thandleEdit={handleEdit}\n\t\t\t\t\t\t\t\t{...formikProps}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Form>\n\t\t\t\t)}\n\t\t\t</Formik>\n\t\t</Container>\n\t);\n}\n\nexport default PostItItem;\n","import React, { useCallback, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Board as BoardType } from '../../store/board';\nimport { addPostIt, PostIt as PostItType } from '../../store/postIt';\nimport BoardName from './BoardName';\nimport PostItItem from '../postIt/PostItItem';\nimport { useDispatch } from 'react-redux';\n\nconst Container = styled.div`\n\tposition: relative;\n\tpadding: 1rem;\n\twidth: calc(100% - 200px);\n\tbackground-color: #ffffff;\n\tbackground-image: linear-gradient(\n\t\t\trgba(210, 210, 210, 0.5) 0.5px,\n\t\t\ttransparent 0.5px\n\t\t),\n\t\tlinear-gradient(to right, rgba(210, 210, 210, 0.5) 0.5px, #ffffff 0.5px);\n\tbackground-size: 10px 10px;\n`;\n\ntype BoardProps = {\n\tboard: BoardType;\n\tpostItList: PostItType[];\n};\n\nfunction Board({ board, postItList }: BoardProps) {\n\tconst dispatch = useDispatch();\n\n\tconst addNewPostIt = useCallback(\n\t\t(x: number = 100, y: number = 100) => {\n\t\t\tif (board.id < 1) return;\n\n\t\t\tconst newPostIt = {\n\t\t\t\tid: 0,\n\t\t\t\tboardId: board.id,\n\t\t\t\ttitle: '새 포스트잇',\n\t\t\t\tcontent: '',\n\t\t\t\tposition: { x: x, y: y },\n\t\t\t\tsize: { width: 200, height: 200 },\n\t\t\t\tisOpen: true,\n\t\t\t\tzIndex: 1,\n\t\t\t};\n\t\t\tdispatch(addPostIt(newPostIt));\n\t\t},\n\t\t[dispatch, board.id],\n\t);\n\n\tuseEffect(() => {\n\t\tfunction onKeyDown(e: KeyboardEvent) {\n\t\t\tif ((e.ctrlKey || e.metaKey) && e.altKey && e.code === 'KeyN') {\n\t\t\t\taddNewPostIt();\n\t\t\t}\n\t\t}\n\t\tdocument.addEventListener('keydown', onKeyDown);\n\t}, [addNewPostIt]);\n\n\tfunction onDoubleClick(e: React.MouseEvent<HTMLDivElement>) {\n\t\tconst { pageX: x, pageY: y } = e;\n\t\tconst clientRect = e.currentTarget.getBoundingClientRect();\n\n\t\taddNewPostIt(x - clientRect.left, y);\n\t}\n\n\treturn (\n\t\t<Container onDoubleClick={onDoubleClick}>\n\t\t\t<BoardName board={board} />\n\t\t\t{postItList.length > 0 &&\n\t\t\t\tpostItList.map((postIt: PostItType) => (\n\t\t\t\t\t<PostItItem key={postIt.id} postIt={postIt} />\n\t\t\t\t))}\n\t\t</Container>\n\t);\n}\n\nexport default Board;\n","import React, { useEffect } from 'react';\nimport BoardList from '../components/board/BoardList';\nimport Board from '../components/board/Board';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../store';\nimport { Board as BoardType } from '../store/board';\nimport {\n\taddBoard,\n\tgetActivation,\n\tgetList as getBoardList,\n\tsetActivation,\n} from '../store/board';\nimport { getList as getPostItList } from '../store/postIt';\n\nconst Container = styled.div`\n\tdisplay: flex;\n\theight: 100%;\n`;\n\nfunction PostItBoardApp() {\n\tconst dispatch = useDispatch();\n\tconst board = useSelector((state: RootState) => state.board);\n\tconst postIt = useSelector((state: RootState) => state.postIt);\n\n\tuseEffect(() => {\n\t\tdispatch(getBoardList());\n\t\tdispatch(getActivation());\n\t}, [dispatch]);\n\n\tuseEffect(() => {\n\t\tconst boardId = board.activation.id;\n\t\tif (boardId > 0) {\n\t\t\tdispatch(getPostItList(boardId));\n\t\t}\n\t}, [dispatch, board]);\n\n\tuseEffect(() => {\n\t\tif (board.result) {\n\t\t\tdispatch(getBoardList());\n\t\t}\n\t}, [dispatch, board.result]);\n\n\tuseEffect(() => {\n\t\tconst boardId = board.activation.id;\n\t\tif (postIt.result && boardId > 0) {\n\t\t\tdispatch(getPostItList(boardId));\n\t\t}\n\t}, [dispatch, board.activation.id, postIt.result]);\n\n\tconst onInsert = () => {\n\t\tdispatch(addBoard('새 보드'));\n\t};\n\n\tconst onChangeActivation = (board: BoardType) => {\n\t\tdispatch(setActivation(board));\n\t};\n\n\treturn (\n\t\t<Container>\n\t\t\t<BoardList\n\t\t\t\tlist={board.list}\n\t\t\t\tactivation={board.activation}\n\t\t\t\tonInsert={onInsert}\n\t\t\t\tonChangeActivation={onChangeActivation}\n\t\t\t/>\n\t\t\t<Board board={board.activation} postItList={postIt.list} />\n\t\t</Container>\n\t);\n}\n\nexport default PostItBoardApp;\n","import React from 'react';\nimport PostItBoardApp from './containers/PostItBoardApp';\n\nconst App: React.FC = () => {\n\treturn <PostItBoardApp />;\n};\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport board from './board';\nimport postIt from './postIt';\n\nconst rootReducer = combineReducers({\n\tboard,\n\tpostIt,\n});\n\nexport default rootReducer;\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from './store';\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root'),\n);\n"],"sourceRoot":""}